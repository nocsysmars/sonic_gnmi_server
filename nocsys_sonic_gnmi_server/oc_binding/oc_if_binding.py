
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
  unicode = str
elif six.PY2:
  import __builtin__

class yc_config_openconfig_interfaces__interfaces_interface_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configurable items at the global, physical interface
level
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__name','__type','__mtu','__description','__enabled','__tpid',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)
    self.__tpid = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=True)
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=True)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces/interface/config/name (string)

    YANG Description: The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.  The 'config false'
list interfaces/interface[name]/state contains the currently
existing interfaces on the device.

If a client tries to create configuration for a
system-controlled interface that is not present in the
corresponding state list, the server MAY reject
the request if the implementation does not support
pre-provisioning of interfaces or if the name refers to
an interface that can never exist in the system.  A
NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.

The IETF model in RFC 7223 provides YANG features for the
following (i.e., pre-provisioning and arbitrary-names),
however they are omitted here:

 If the device supports pre-provisioning of interface
 configuration, the 'pre-provisioning' feature is
 advertised.

 If the device allows arbitrarily named user-controlled
 interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
/interfaces/interface[name]/state list.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces/interface/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.  The 'config false'
list interfaces/interface[name]/state contains the currently
existing interfaces on the device.

If a client tries to create configuration for a
system-controlled interface that is not present in the
corresponding state list, the server MAY reject
the request if the implementation does not support
pre-provisioning of interfaces or if the name refers to
an interface that can never exist in the system.  A
NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.

The IETF model in RFC 7223 provides YANG features for the
following (i.e., pre-provisioning and arbitrary-names),
however they are omitted here:

 If the device supports pre-provisioning of interface
 configuration, the 'pre-provisioning' feature is
 advertised.

 If the device allows arbitrarily named user-controlled
 interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
/interfaces/interface[name]/state list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /interfaces/interface/config/type (identityref)

    YANG Description: The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /interfaces/interface/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-interfaces:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /interfaces/interface/config/mtu (uint16)

    YANG Description: Set the max transmission unit size in octets
for the physical interface.  If this is not set, the mtu is
set to the operational default -- e.g., 1514 bytes on an
Ethernet interface.
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /interfaces/interface/config/mtu (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: Set the max transmission unit size in octets
for the physical interface.  If this is not set, the mtu is
set to the operational default -- e.g., 1514 bytes on an
Ethernet interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /interfaces/interface/config/description (string)

    YANG Description: A textual description of the interface.

A server implementation MAY map this leaf to the ifAlias
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifAlias.  The definition of
such a mechanism is outside the scope of this document.

Since ifAlias is defined to be stored in non-volatile
storage, the MIB implementation MUST map ifAlias to the
value of 'description' in the persistently stored
datastore.

Specifically, if the device supports ':startup', when
ifAlias is read the device MUST return the value of
'description' in the 'startup' datastore, and when it is
written, it MUST be written to the 'running' and 'startup'
datastores.  Note that it is up to the implementation to

decide whether to modify this single leaf in 'startup' or
perform an implicit copy-config from 'running' to
'startup'.

If the device does not support ':startup', ifAlias MUST
be mapped to the 'description' leaf in the 'running'
datastore.
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /interfaces/interface/config/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A textual description of the interface.

A server implementation MAY map this leaf to the ifAlias
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifAlias.  The definition of
such a mechanism is outside the scope of this document.

Since ifAlias is defined to be stored in non-volatile
storage, the MIB implementation MUST map ifAlias to the
value of 'description' in the persistently stored
datastore.

Specifically, if the device supports ':startup', when
ifAlias is read the device MUST return the value of
'description' in the 'startup' datastore, and when it is
written, it MUST be written to the 'running' and 'startup'
datastores.  Note that it is up to the implementation to

decide whether to modify this single leaf in 'startup' or
perform an implicit copy-config from 'running' to
'startup'.

If the device does not support ':startup', ifAlias MUST
be mapped to the 'description' leaf in the 'running'
datastore.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=True)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /interfaces/interface/config/enabled (boolean)

    YANG Description: This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.

Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /interfaces/interface/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.

Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=True)


  def _get_tpid(self):
    """
    Getter method for tpid, mapped from YANG variable /interfaces/interface/config/tpid (identityref)

    YANG Description: Optionally set the tag protocol identifier field (TPID) that
is accepted on the VLAN
    """
    return self.__tpid
      
  def _set_tpid(self, v, load=False):
    """
    Setter method for tpid, mapped from YANG variable /interfaces/interface/config/tpid (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tpid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tpid() directly.

    YANG Description: Optionally set the tag protocol identifier field (TPID) that
is accepted on the VLAN
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tpid must be of a type compatible with identityref""",
          'defined-type': "openconfig-vlan:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=True)""",
        })

    self.__tpid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tpid(self):
    self.__tpid = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  description = __builtin__.property(_get_description, _set_description)
  enabled = __builtin__.property(_get_enabled, _set_enabled)
  tpid = __builtin__.property(_get_tpid, _set_tpid)


  _pyangbind_elements = {'name': name, 'type': type, 'mtu': mtu, 'description': description, 'enabled': enabled, 'tpid': tpid, }


class yc_counters_openconfig_interfaces__interfaces_interface_state_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of interface-related statistics objects.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__in_octets','__in_unicast_pkts','__in_multicast_pkts','__in_discards','__in_errors','__out_octets','__out_unicast_pkts','__out_multicast_pkts','__out_discards','__out_errors',)

  _yang_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__in_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__in_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__out_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__in_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__in_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__out_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__in_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__out_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__out_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    self.__out_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'state', u'counters']

  def _get_in_octets(self):
    """
    Getter method for in_octets, mapped from YANG variable /interfaces/interface/state/counters/in_octets (oc-yang:counter64)

    YANG Description: The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__in_octets
      
  def _set_in_octets(self, v, load=False):
    """
    Setter method for in_octets, mapped from YANG variable /interfaces/interface/state/counters/in_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_octets() directly.

    YANG Description: The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_octets(self):
    self.__in_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_unicast_pkts(self):
    """
    Getter method for in_unicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/in_unicast_pkts (oc-yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__in_unicast_pkts
      
  def _set_in_unicast_pkts(self, v, load=False):
    """
    Setter method for in_unicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/in_unicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_unicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_unicast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_unicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_unicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_unicast_pkts(self):
    self.__in_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_multicast_pkts(self):
    """
    Getter method for in_multicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/in_multicast_pkts (oc-yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__in_multicast_pkts
      
  def _set_in_multicast_pkts(self, v, load=False):
    """
    Setter method for in_multicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/in_multicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_multicast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_multicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_multicast_pkts(self):
    self.__in_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_discards(self):
    """
    Getter method for in_discards, mapped from YANG variable /interfaces/interface/state/counters/in_discards (oc-yang:counter64)

    YANG Description: The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__in_discards
      
  def _set_in_discards(self, v, load=False):
    """
    Setter method for in_discards, mapped from YANG variable /interfaces/interface/state/counters/in_discards (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_discards is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_discards() directly.

    YANG Description: The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_discards must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_discards = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_discards(self):
    self.__in_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_in_errors(self):
    """
    Getter method for in_errors, mapped from YANG variable /interfaces/interface/state/counters/in_errors (oc-yang:counter64)

    YANG Description: For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__in_errors
      
  def _set_in_errors(self, v, load=False):
    """
    Setter method for in_errors, mapped from YANG variable /interfaces/interface/state/counters/in_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_errors() directly.

    YANG Description: For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__in_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_errors(self):
    self.__in_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_octets(self):
    """
    Getter method for out_octets, mapped from YANG variable /interfaces/interface/state/counters/out_octets (oc-yang:counter64)

    YANG Description: The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__out_octets
      
  def _set_out_octets(self, v, load=False):
    """
    Setter method for out_octets, mapped from YANG variable /interfaces/interface/state/counters/out_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_octets() directly.

    YANG Description: The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_octets(self):
    self.__out_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_unicast_pkts(self):
    """
    Getter method for out_unicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/out_unicast_pkts (oc-yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted, and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__out_unicast_pkts
      
  def _set_out_unicast_pkts(self, v, load=False):
    """
    Setter method for out_unicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/out_unicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_unicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_unicast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted, and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_unicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_unicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_unicast_pkts(self):
    self.__out_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_multicast_pkts(self):
    """
    Getter method for out_multicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/out_multicast_pkts (oc-yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted, and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__out_multicast_pkts
      
  def _set_out_multicast_pkts(self, v, load=False):
    """
    Setter method for out_multicast_pkts, mapped from YANG variable /interfaces/interface/state/counters/out_multicast_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_multicast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted, and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_multicast_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_multicast_pkts(self):
    self.__out_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_discards(self):
    """
    Getter method for out_discards, mapped from YANG variable /interfaces/interface/state/counters/out_discards (oc-yang:counter64)

    YANG Description: The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__out_discards
      
  def _set_out_discards(self, v, load=False):
    """
    Setter method for out_discards, mapped from YANG variable /interfaces/interface/state/counters/out_discards (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_discards is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_discards() directly.

    YANG Description: The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_discards must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_discards = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_discards(self):
    self.__out_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)


  def _get_out_errors(self):
    """
    Getter method for out_errors, mapped from YANG variable /interfaces/interface/state/counters/out_errors (oc-yang:counter64)

    YANG Description: For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    return self.__out_errors
      
  def _set_out_errors(self, v, load=False):
    """
    Setter method for out_errors, mapped from YANG variable /interfaces/interface/state/counters/out_errors (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_errors() directly.

    YANG Description: For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'last-clear'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_errors must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__out_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_errors(self):
    self.__out_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='oc-yang:counter64', is_config=False)

  in_octets = __builtin__.property(_get_in_octets)
  in_unicast_pkts = __builtin__.property(_get_in_unicast_pkts)
  in_multicast_pkts = __builtin__.property(_get_in_multicast_pkts)
  in_discards = __builtin__.property(_get_in_discards)
  in_errors = __builtin__.property(_get_in_errors)
  out_octets = __builtin__.property(_get_out_octets)
  out_unicast_pkts = __builtin__.property(_get_out_unicast_pkts)
  out_multicast_pkts = __builtin__.property(_get_out_multicast_pkts)
  out_discards = __builtin__.property(_get_out_discards)
  out_errors = __builtin__.property(_get_out_errors)


  _pyangbind_elements = {'in_octets': in_octets, 'in_unicast_pkts': in_unicast_pkts, 'in_multicast_pkts': in_multicast_pkts, 'in_discards': in_discards, 'in_errors': in_errors, 'out_octets': out_octets, 'out_unicast_pkts': out_unicast_pkts, 'out_multicast_pkts': out_multicast_pkts, 'out_discards': out_discards, 'out_errors': out_errors, }


class yc_state_openconfig_interfaces__interfaces_interface_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data at the global interface level
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__name','__type','__mtu','__description','__enabled','__ifindex','__admin_status','__oper_status','__counters','__tpid',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)
    self.__tpid = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=False)
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=False)
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DORMANT': {'value': 5}, u'LOWER_LAYER_DOWN': {'value': 7}, u'UNKNOWN': {'value': 4}, u'TESTING': {'value': 3}, u'UP': {'value': 1}, u'DOWN': {'value': 2}, u'NOT_PRESENT': {'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=False)
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DOWN': {}, u'TESTING': {}, u'UP': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)
    self.__ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint32', is_config=False)
    self.__counters = YANGDynClass(base=yc_counters_openconfig_interfaces__interfaces_interface_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=False)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces/interface/state/name (string)

    YANG Description: The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.  The 'config false'
list interfaces/interface[name]/state contains the currently
existing interfaces on the device.

If a client tries to create configuration for a
system-controlled interface that is not present in the
corresponding state list, the server MAY reject
the request if the implementation does not support
pre-provisioning of interfaces or if the name refers to
an interface that can never exist in the system.  A
NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.

The IETF model in RFC 7223 provides YANG features for the
following (i.e., pre-provisioning and arbitrary-names),
however they are omitted here:

 If the device supports pre-provisioning of interface
 configuration, the 'pre-provisioning' feature is
 advertised.

 If the device allows arbitrarily named user-controlled
 interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
/interfaces/interface[name]/state list.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces/interface/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.  The 'config false'
list interfaces/interface[name]/state contains the currently
existing interfaces on the device.

If a client tries to create configuration for a
system-controlled interface that is not present in the
corresponding state list, the server MAY reject
the request if the implementation does not support
pre-provisioning of interfaces or if the name refers to
an interface that can never exist in the system.  A
NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.

The IETF model in RFC 7223 provides YANG features for the
following (i.e., pre-provisioning and arbitrary-names),
however they are omitted here:

 If the device supports pre-provisioning of interface
 configuration, the 'pre-provisioning' feature is
 advertised.

 If the device allows arbitrarily named user-controlled
 interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
/interfaces/interface[name]/state list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /interfaces/interface/state/type (identityref)

    YANG Description: The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /interfaces/interface/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-interfaces:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'ift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qllc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dlsw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88024TokenBus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannelGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ss7SigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cctEmul': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdh1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88022llc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rs232': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:usb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vmwareNicTeam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:miox25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1FDL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bits': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:radioMAC': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aflane8023': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmbond': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25huntGroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mfSigLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eplrs': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOtu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v11': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:channel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:e1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:regular1822': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ddnX25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc877x25': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon10Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetPath': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:teLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'gr303IDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:nsip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:softwareLoopback': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'q2931': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:linegroup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:econet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEM': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbTdm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ilan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:termPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hiperlan2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:nfas': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXO': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdci': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vmwareVirtualNic': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025TokenRing': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifVfiType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:lmp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualTg': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pos': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'macSecUncontrolledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableMCmtsDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:vdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds0': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ds3': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pppMultilinkBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdns': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at64k': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tr008': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:para': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l3ipxvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:imt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88026Man': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mpegTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:adsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:localTalk': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frDlciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gtp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'escon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ultra': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ds0Bundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x213': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'coffee': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mvl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ieee80216WMAN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:starLan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isdn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iana-interface-type': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'qam': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ces': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:iso88025CRFPInt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cblVectaStar': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEMFGD': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sixToFour': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arcnet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'shdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRccUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee802154': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:wwanPP2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'infiniband': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80212': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hostPad': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee80211': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceFGDOS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:if-gsn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'l2vlan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x86Laps': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fastEtherFX': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal5': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapf': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:homepna': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aal2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gfast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:idsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:h323Proxy': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:actelisMetaLOOP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hyperchannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rsrb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sipSig': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'async': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ibm370parChan': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:proteon80Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsMacLayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bridge': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mediaMailOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ipOverCdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propWirelessP2P': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:eon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'x25ple': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:vdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propVirtual': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:compositeLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:x25mlp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverFrameRelay': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ipOverClaw': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mpls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'plc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'radsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceEncap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon155': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceOverCable': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:slip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapWtpVirtualRadio': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'srp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:bsc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pon622': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:bgppolicyaccounting': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl2plus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'tdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:basicISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:primaryISDN': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:otnOdu': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ppp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:arap': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:fcipLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88023Csmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'atmFuni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fast': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'digitalPowerline': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:propPointToPointSerial': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aflane8025': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Profile': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'dvbAsiOut': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceDID': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:ieee1394': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:fddi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:sdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gr303RDT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:modem': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceOverAtm': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:opticalTransport': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:frf16MfrBundle': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmDxi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:aluELP': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:smdsIcip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:stackToStack': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:interleave': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:hippiInterface': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v35': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v36': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'v37': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9982': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9983': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pip': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:g703at2mb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmLogical': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'adsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'h323Gatekeeper': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:gpon': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:mocaVersion1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'capwapDot11Bss': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:reachDSL': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:myrinet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'voiceEBS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:voiceFXS': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:atmIma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'docsOfdmaUpstream': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propCnls': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hssi': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'iso88025Fiber': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:docsCableUpstreamRfPort': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:g9981': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'a12MppSwitch': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:rpr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:other': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:isup': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdsl2': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:cnr': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:gigabitEthernet': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'sdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ipForward': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:hdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:frameRelayService': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:tunnel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:voiceFGDEANA': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:ifPwType': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'fibreChannel': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dvbRcsTdma': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:transpHdlc': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:rfc1483': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:sonetVT': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:msdsl': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:dcn': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ift:virtualIpAddress': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'aviciOpticalEther': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'propBWAp2Mp': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}, u'ianaift:lapb': {'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', '@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='identityref', is_config=False)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /interfaces/interface/state/mtu (uint16)

    YANG Description: Set the max transmission unit size in octets
for the physical interface.  If this is not set, the mtu is
set to the operational default -- e.g., 1514 bytes on an
Ethernet interface.
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /interfaces/interface/state/mtu (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: Set the max transmission unit size in octets
for the physical interface.  If this is not set, the mtu is
set to the operational default -- e.g., 1514 bytes on an
Ethernet interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=False)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint16', is_config=False)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /interfaces/interface/state/description (string)

    YANG Description: A textual description of the interface.

A server implementation MAY map this leaf to the ifAlias
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifAlias.  The definition of
such a mechanism is outside the scope of this document.

Since ifAlias is defined to be stored in non-volatile
storage, the MIB implementation MUST map ifAlias to the
value of 'description' in the persistently stored
datastore.

Specifically, if the device supports ':startup', when
ifAlias is read the device MUST return the value of
'description' in the 'startup' datastore, and when it is
written, it MUST be written to the 'running' and 'startup'
datastores.  Note that it is up to the implementation to

decide whether to modify this single leaf in 'startup' or
perform an implicit copy-config from 'running' to
'startup'.

If the device does not support ':startup', ifAlias MUST
be mapped to the 'description' leaf in the 'running'
datastore.
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /interfaces/interface/state/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A textual description of the interface.

A server implementation MAY map this leaf to the ifAlias
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifAlias.  The definition of
such a mechanism is outside the scope of this document.

Since ifAlias is defined to be stored in non-volatile
storage, the MIB implementation MUST map ifAlias to the
value of 'description' in the persistently stored
datastore.

Specifically, if the device supports ':startup', when
ifAlias is read the device MUST return the value of
'description' in the 'startup' datastore, and when it is
written, it MUST be written to the 'running' and 'startup'
datastores.  Note that it is up to the implementation to

decide whether to modify this single leaf in 'startup' or
perform an implicit copy-config from 'running' to
'startup'.

If the device does not support ':startup', ifAlias MUST
be mapped to the 'description' leaf in the 'running'
datastore.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='string', is_config=False)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /interfaces/interface/state/enabled (boolean)

    YANG Description: This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.

Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /interfaces/interface/state/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.

Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=False)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='boolean', is_config=False)


  def _get_ifindex(self):
    """
    Getter method for ifindex, mapped from YANG variable /interfaces/interface/state/ifindex (uint32)

    YANG Description: System assigned number for each interface.  Corresponds to
ifIndex object in SNMP Interface MIB
    """
    return self.__ifindex
      
  def _set_ifindex(self, v, load=False):
    """
    Setter method for ifindex, mapped from YANG variable /interfaces/interface/state/ifindex (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifindex is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifindex() directly.

    YANG Description: System assigned number for each interface.  Corresponds to
ifIndex object in SNMP Interface MIB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifindex must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint32', is_config=False)""",
        })

    self.__ifindex = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifindex(self):
    self.__ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='uint32', is_config=False)


  def _get_admin_status(self):
    """
    Getter method for admin_status, mapped from YANG variable /interfaces/interface/state/admin_status (enumeration)

    YANG Description: The desired state of the interface.  In RFC 7223 this leaf
has the same read semantics as ifAdminStatus.  Here, it
reflects the administrative state as set by enabling or
disabling the interface.
    """
    return self.__admin_status
      
  def _set_admin_status(self, v, load=False):
    """
    Setter method for admin_status, mapped from YANG variable /interfaces/interface/state/admin_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_status() directly.

    YANG Description: The desired state of the interface.  In RFC 7223 this leaf
has the same read semantics as ifAdminStatus.  Here, it
reflects the administrative state as set by enabling or
disabling the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DOWN': {}, u'TESTING': {}, u'UP': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-interfaces:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DOWN': {}, u'TESTING': {}, u'UP': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)""",
        })

    self.__admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_status(self):
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DOWN': {}, u'TESTING': {}, u'UP': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)


  def _get_oper_status(self):
    """
    Getter method for oper_status, mapped from YANG variable /interfaces/interface/state/oper_status (enumeration)

    YANG Description: The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
    """
    return self.__oper_status
      
  def _set_oper_status(self, v, load=False):
    """
    Setter method for oper_status, mapped from YANG variable /interfaces/interface/state/oper_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_status() directly.

    YANG Description: The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DORMANT': {'value': 5}, u'LOWER_LAYER_DOWN': {'value': 7}, u'UNKNOWN': {'value': 4}, u'TESTING': {'value': 3}, u'UP': {'value': 1}, u'DOWN': {'value': 2}, u'NOT_PRESENT': {'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-interfaces:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DORMANT': {'value': 5}, u'LOWER_LAYER_DOWN': {'value': 7}, u'UNKNOWN': {'value': 4}, u'TESTING': {'value': 3}, u'UP': {'value': 1}, u'DOWN': {'value': 2}, u'NOT_PRESENT': {'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)""",
        })

    self.__oper_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_status(self):
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DORMANT': {'value': 5}, u'LOWER_LAYER_DOWN': {'value': 7}, u'UNKNOWN': {'value': 4}, u'TESTING': {'value': 3}, u'UP': {'value': 1}, u'DOWN': {'value': 2}, u'NOT_PRESENT': {'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='enumeration', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /interfaces/interface/state/counters (container)

    YANG Description: A collection of interface-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /interfaces/interface/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of interface-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_counters_openconfig_interfaces__interfaces_interface_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_counters_openconfig_interfaces__interfaces_interface_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=yc_counters_openconfig_interfaces__interfaces_interface_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=False)


  def _get_tpid(self):
    """
    Getter method for tpid, mapped from YANG variable /interfaces/interface/state/tpid (identityref)

    YANG Description: Optionally set the tag protocol identifier field (TPID) that
is accepted on the VLAN
    """
    return self.__tpid
      
  def _set_tpid(self, v, load=False):
    """
    Setter method for tpid, mapped from YANG variable /interfaces/interface/state/tpid (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tpid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tpid() directly.

    YANG Description: Optionally set the tag protocol identifier field (TPID) that
is accepted on the VLAN
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tpid must be of a type compatible with identityref""",
          'defined-type': "openconfig-vlan:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=False)""",
        })

    self.__tpid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tpid(self):
    self.__tpid = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-vlan-types:TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X9200': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'TPID_0X8100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X88A8': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}, u'oc-vlan-types:TPID_0X9100': {'@namespace': u'http://openconfig.net/yang/vlan-types', '@module': u'openconfig-vlan-types'}},), default=unicode("oc-vlan-types:TPID_0X8100"), is_leaf=True, yang_name="tpid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='identityref', is_config=False)

  name = __builtin__.property(_get_name)
  type = __builtin__.property(_get_type)
  mtu = __builtin__.property(_get_mtu)
  description = __builtin__.property(_get_description)
  enabled = __builtin__.property(_get_enabled)
  ifindex = __builtin__.property(_get_ifindex)
  admin_status = __builtin__.property(_get_admin_status)
  oper_status = __builtin__.property(_get_oper_status)
  counters = __builtin__.property(_get_counters)
  tpid = __builtin__.property(_get_tpid)


  _pyangbind_elements = {'name': name, 'type': type, 'mtu': mtu, 'description': description, 'enabled': enabled, 'ifindex': ifindex, 'admin_status': admin_status, 'oper_status': oper_status, 'counters': counters, 'tpid': tpid, }


class yc_config_openconfig_interfaces__interfaces_interface_ethernet_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/ethernet/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for ethernet interfaces
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__mac_address','__auto_negotiate','__duplex_mode','__port_speed','__enable_flow_control','__aggregate_id',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__duplex_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FULL': {}, u'HALF': {}},), is_leaf=True, yang_name="duplex-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='enumeration', is_config=True)
    self.__mac_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='oc-yang:mac-address', is_config=True)
    self.__aggregate_id = YANGDynClass(base=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name', caller=self._path() + ['aggregate-id'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="aggregate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='leafref', is_config=True)
    self.__auto_negotiate = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-negotiate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)
    self.__port_speed = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-eth:SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}},), is_leaf=True, yang_name="port-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='identityref', is_config=True)
    self.__enable_flow_control = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'ethernet', u'config']

  def _get_mac_address(self):
    """
    Getter method for mac_address, mapped from YANG variable /interfaces/interface/ethernet/config/mac_address (oc-yang:mac-address)

    YANG Description: Assigns a MAC address to the Ethernet interface.  If not
specified, the corresponding operational state leaf is
expected to show the system-assigned MAC address.
    """
    return self.__mac_address
      
  def _set_mac_address(self, v, load=False):
    """
    Setter method for mac_address, mapped from YANG variable /interfaces/interface/ethernet/config/mac_address (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_address() directly.

    YANG Description: Assigns a MAC address to the Ethernet interface.  If not
specified, the corresponding operational state leaf is
expected to show the system-assigned MAC address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='oc-yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_address must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='oc-yang:mac-address', is_config=True)""",
        })

    self.__mac_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_address(self):
    self.__mac_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='oc-yang:mac-address', is_config=True)


  def _get_auto_negotiate(self):
    """
    Getter method for auto_negotiate, mapped from YANG variable /interfaces/interface/ethernet/config/auto_negotiate (boolean)

    YANG Description: Set to TRUE to request the interface to auto-negotiate
transmission parameters with its peer interface.  When
set to FALSE, the transmission parameters are specified
manually.
    """
    return self.__auto_negotiate
      
  def _set_auto_negotiate(self, v, load=False):
    """
    Setter method for auto_negotiate, mapped from YANG variable /interfaces/interface/ethernet/config/auto_negotiate (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_negotiate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_negotiate() directly.

    YANG Description: Set to TRUE to request the interface to auto-negotiate
transmission parameters with its peer interface.  When
set to FALSE, the transmission parameters are specified
manually.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-negotiate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_negotiate must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-negotiate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)""",
        })

    self.__auto_negotiate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_negotiate(self):
    self.__auto_negotiate = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-negotiate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)


  def _get_duplex_mode(self):
    """
    Getter method for duplex_mode, mapped from YANG variable /interfaces/interface/ethernet/config/duplex_mode (enumeration)

    YANG Description: When auto-negotiate is TRUE, this optionally sets the
duplex mode that will be advertised to the peer.  If
unspecified, the interface should negotiate the duplex mode
directly (typically full-duplex).  When auto-negotiate is
FALSE, this sets the duplex mode on the interface directly.
    """
    return self.__duplex_mode
      
  def _set_duplex_mode(self, v, load=False):
    """
    Setter method for duplex_mode, mapped from YANG variable /interfaces/interface/ethernet/config/duplex_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duplex_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duplex_mode() directly.

    YANG Description: When auto-negotiate is TRUE, this optionally sets the
duplex mode that will be advertised to the peer.  If
unspecified, the interface should negotiate the duplex mode
directly (typically full-duplex).  When auto-negotiate is
FALSE, this sets the duplex mode on the interface directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FULL': {}, u'HALF': {}},), is_leaf=True, yang_name="duplex-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duplex_mode must be of a type compatible with enumeration""",
          'defined-type': "openconfig-if-ethernet:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FULL': {}, u'HALF': {}},), is_leaf=True, yang_name="duplex-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='enumeration', is_config=True)""",
        })

    self.__duplex_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duplex_mode(self):
    self.__duplex_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FULL': {}, u'HALF': {}},), is_leaf=True, yang_name="duplex-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='enumeration', is_config=True)


  def _get_port_speed(self):
    """
    Getter method for port_speed, mapped from YANG variable /interfaces/interface/ethernet/config/port_speed (identityref)

    YANG Description: When auto-negotiate is TRUE, this optionally sets the
port-speed mode that will be advertised to the peer for
negotiation.  If unspecified, it is expected that the
interface will select the highest speed available based on
negotiation.  When auto-negotiate is set to FALSE, sets the
link speed to a fixed value -- supported values are defined
by ETHERNET_SPEED identities
    """
    return self.__port_speed
      
  def _set_port_speed(self, v, load=False):
    """
    Setter method for port_speed, mapped from YANG variable /interfaces/interface/ethernet/config/port_speed (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_speed() directly.

    YANG Description: When auto-negotiate is TRUE, this optionally sets the
port-speed mode that will be advertised to the peer for
negotiation.  If unspecified, it is expected that the
interface will select the highest speed available based on
negotiation.  When auto-negotiate is set to FALSE, sets the
link speed to a fixed value -- supported values are defined
by ETHERNET_SPEED identities
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-eth:SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}},), is_leaf=True, yang_name="port-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_speed must be of a type compatible with identityref""",
          'defined-type': "openconfig-if-ethernet:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-eth:SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}},), is_leaf=True, yang_name="port-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='identityref', is_config=True)""",
        })

    self.__port_speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_speed(self):
    self.__port_speed = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-eth:SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_1GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_40GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_2500MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_100MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_25GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_UNKNOWN': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_50GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'oc-eth:SPEED_10MB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}, u'SPEED_5GB': {'@namespace': u'http://openconfig.net/yang/interfaces/ethernet', '@module': u'openconfig-if-ethernet'}},), is_leaf=True, yang_name="port-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='identityref', is_config=True)


  def _get_enable_flow_control(self):
    """
    Getter method for enable_flow_control, mapped from YANG variable /interfaces/interface/ethernet/config/enable_flow_control (boolean)

    YANG Description: Enable or disable flow control for this interface.
Ethernet flow control is a mechanism by which a receiver
may send PAUSE frames to a sender to stop transmission for
a specified time.

This setting should override auto-negotiated flow control
settings.  If left unspecified, and auto-negotiate is TRUE,
flow control mode is negotiated with the peer interface.
    """
    return self.__enable_flow_control
      
  def _set_enable_flow_control(self, v, load=False):
    """
    Setter method for enable_flow_control, mapped from YANG variable /interfaces/interface/ethernet/config/enable_flow_control (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_flow_control is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_flow_control() directly.

    YANG Description: Enable or disable flow control for this interface.
Ethernet flow control is a mechanism by which a receiver
may send PAUSE frames to a sender to stop transmission for
a specified time.

This setting should override auto-negotiated flow control
settings.  If left unspecified, and auto-negotiate is TRUE,
flow control mode is negotiated with the peer interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_flow_control must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)""",
        })

    self.__enable_flow_control = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_flow_control(self):
    self.__enable_flow_control = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='boolean', is_config=True)


  def _get_aggregate_id(self):
    """
    Getter method for aggregate_id, mapped from YANG variable /interfaces/interface/ethernet/config/aggregate_id (leafref)

    YANG Description: Specify the logical aggregate interface to which
this interface belongs
    """
    return self.__aggregate_id
      
  def _set_aggregate_id(self, v, load=False):
    """
    Setter method for aggregate_id, mapped from YANG variable /interfaces/interface/ethernet/config/aggregate_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aggregate_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aggregate_id() directly.

    YANG Description: Specify the logical aggregate interface to which
this interface belongs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name', caller=self._path() + ['aggregate-id'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="aggregate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aggregate_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name', caller=self._path() + ['aggregate-id'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="aggregate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='leafref', is_config=True)""",
        })

    self.__aggregate_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aggregate_id(self):
    self.__aggregate_id = YANGDynClass(base=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name', caller=self._path() + ['aggregate-id'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="aggregate-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='leafref', is_config=True)

  mac_address = __builtin__.property(_get_mac_address, _set_mac_address)
  auto_negotiate = __builtin__.property(_get_auto_negotiate, _set_auto_negotiate)
  duplex_mode = __builtin__.property(_get_duplex_mode, _set_duplex_mode)
  port_speed = __builtin__.property(_get_port_speed, _set_port_speed)
  enable_flow_control = __builtin__.property(_get_enable_flow_control, _set_enable_flow_control)
  aggregate_id = __builtin__.property(_get_aggregate_id, _set_aggregate_id)


  _pyangbind_elements = {'mac_address': mac_address, 'auto_negotiate': auto_negotiate, 'duplex_mode': duplex_mode, 'port_speed': port_speed, 'enable_flow_control': enable_flow_control, 'aggregate_id': aggregate_id, }


class yc_config_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/ethernet/switched-vlan/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters for VLANs
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__interface_mode','__native_vlan','__access_vlan','__trunk_vlans',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__native_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    self.__access_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    self.__trunk_vlans = YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)
    self.__interface_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'ethernet', u'switched-vlan', u'config']

  def _get_interface_mode(self):
    """
    Getter method for interface_mode, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/interface_mode (oc-vlan-types:vlan-mode-type)

    YANG Description: Set the interface to access or trunk mode for
VLANs
    """
    return self.__interface_mode
      
  def _set_interface_mode(self, v, load=False):
    """
    Setter method for interface_mode, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/interface_mode (oc-vlan-types:vlan-mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_mode() directly.

    YANG Description: Set the interface to access or trunk mode for
VLANs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_mode must be of a type compatible with oc-vlan-types:vlan-mode-type""",
          'defined-type': "oc-vlan-types:vlan-mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)""",
        })

    self.__interface_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_mode(self):
    self.__interface_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)


  def _get_native_vlan(self):
    """
    Getter method for native_vlan, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/native_vlan (oc-vlan-types:vlan-id)

    YANG Description: Set the native VLAN id for untagged frames arriving on
a trunk interface.  Tagged frames sent on an interface
configured with a native VLAN should have their tags
stripped prior to transmission. This configuration is only
valid on a trunk interface.
    """
    return self.__native_vlan
      
  def _set_native_vlan(self, v, load=False):
    """
    Setter method for native_vlan, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/native_vlan (oc-vlan-types:vlan-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_native_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_native_vlan() directly.

    YANG Description: Set the native VLAN id for untagged frames arriving on
a trunk interface.  Tagged frames sent on an interface
configured with a native VLAN should have their tags
stripped prior to transmission. This configuration is only
valid on a trunk interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """native_vlan must be of a type compatible with oc-vlan-types:vlan-id""",
          'defined-type': "oc-vlan-types:vlan-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)""",
        })

    self.__native_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_native_vlan(self):
    self.__native_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)


  def _get_access_vlan(self):
    """
    Getter method for access_vlan, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/access_vlan (oc-vlan-types:vlan-id)

    YANG Description: Assign the access vlan to the access port.
    """
    return self.__access_vlan
      
  def _set_access_vlan(self, v, load=False):
    """
    Setter method for access_vlan, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/access_vlan (oc-vlan-types:vlan-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access_vlan() directly.

    YANG Description: Assign the access vlan to the access port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access_vlan must be of a type compatible with oc-vlan-types:vlan-id""",
          'defined-type': "oc-vlan-types:vlan-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)""",
        })

    self.__access_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access_vlan(self):
    self.__access_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)


  def _get_trunk_vlans(self):
    """
    Getter method for trunk_vlans, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/trunk_vlans (union)

    YANG Description: Specify VLANs, or ranges thereof, that the interface may
carry when in trunk mode.  If not specified, all VLANs are
allowed on the interface. Ranges are specified in the form
x..y, where x<y - ranges are assumed to be inclusive (such
that the VLAN range is x <= range <= y.
    """
    return self.__trunk_vlans
      
  def _set_trunk_vlans(self, v, load=False):
    """
    Setter method for trunk_vlans, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config/trunk_vlans (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trunk_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trunk_vlans() directly.

    YANG Description: Specify VLANs, or ranges thereof, that the interface may
carry when in trunk mode.  If not specified, all VLANs are
allowed on the interface. Ranges are specified in the form
x..y, where x<y - ranges are assumed to be inclusive (such
that the VLAN range is x <= range <= y.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trunk_vlans must be of a type compatible with union""",
          'defined-type': "openconfig-vlan:union",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)""",
        })

    self.__trunk_vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trunk_vlans(self):
    self.__trunk_vlans = YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)

  interface_mode = __builtin__.property(_get_interface_mode, _set_interface_mode)
  native_vlan = __builtin__.property(_get_native_vlan, _set_native_vlan)
  access_vlan = __builtin__.property(_get_access_vlan, _set_access_vlan)
  trunk_vlans = __builtin__.property(_get_trunk_vlans, _set_trunk_vlans)


  _pyangbind_elements = {'interface_mode': interface_mode, 'native_vlan': native_vlan, 'access_vlan': access_vlan, 'trunk_vlans': trunk_vlans, }


class yc_switched_vlan_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/ethernet/switched-vlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for VLAN interface-specific
data on Ethernet interfaces.  These are for standard
L2, switched-style VLANs.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__config',)

  _yang_name = 'switched-vlan'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'ethernet', u'switched-vlan']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config (container)

    YANG Description: Configuration parameters for VLANs
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters for VLANs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = {'config': config, }


class yc_ethernet_openconfig_interfaces__interfaces_interface_ethernet(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/ethernet. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for ethernet configuration
and state
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__config','__switched_vlan',)

  _yang_name = 'ethernet'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__switched_vlan = YANGDynClass(base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'ethernet']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/ethernet/config (container)

    YANG Description: Configuration data for ethernet interfaces
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/ethernet/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for ethernet interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_ethernet_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)


  def _get_switched_vlan(self):
    """
    Getter method for switched_vlan, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan (container)

    YANG Description: Enclosing container for VLAN interface-specific
data on Ethernet interfaces.  These are for standard
L2, switched-style VLANs.
    """
    return self.__switched_vlan
      
  def _set_switched_vlan(self, v, load=False):
    """
    Setter method for switched_vlan, mapped from YANG variable /interfaces/interface/ethernet/switched_vlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_switched_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_switched_vlan() directly.

    YANG Description: Enclosing container for VLAN interface-specific
data on Ethernet interfaces.  These are for standard
L2, switched-style VLANs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """switched_vlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)""",
        })

    self.__switched_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_switched_vlan(self):
    self.__switched_vlan = YANGDynClass(base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_ethernet_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  switched_vlan = __builtin__.property(_get_switched_vlan, _set_switched_vlan)


  _pyangbind_elements = {'config': config, 'switched_vlan': switched_vlan, }


class yc_config_openconfig_interfaces__interfaces_interface_aggregation_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/aggregation/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration variables for logical aggregate /
LAG interfaces
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__lag_type','__min_links',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__min_links = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=True)
    self.__lag_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'aggregation', u'config']

  def _get_lag_type(self):
    """
    Getter method for lag_type, mapped from YANG variable /interfaces/interface/aggregation/config/lag_type (aggregation-type)

    YANG Description: Sets the type of LAG, i.e., how it is
configured / maintained
    """
    return self.__lag_type
      
  def _set_lag_type(self, v, load=False):
    """
    Setter method for lag_type, mapped from YANG variable /interfaces/interface/aggregation/config/lag_type (aggregation-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lag_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lag_type() directly.

    YANG Description: Sets the type of LAG, i.e., how it is
configured / maintained
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lag_type must be of a type compatible with aggregation-type""",
          'defined-type': "openconfig-if-aggregate:aggregation-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=True)""",
        })

    self.__lag_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lag_type(self):
    self.__lag_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=True)


  def _get_min_links(self):
    """
    Getter method for min_links, mapped from YANG variable /interfaces/interface/aggregation/config/min_links (uint16)

    YANG Description: Specifies the mininum number of member
interfaces that must be active for the aggregate interface
to be available
    """
    return self.__min_links
      
  def _set_min_links(self, v, load=False):
    """
    Setter method for min_links, mapped from YANG variable /interfaces/interface/aggregation/config/min_links (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_links is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_links() directly.

    YANG Description: Specifies the mininum number of member
interfaces that must be active for the aggregate interface
to be available
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_links must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=True)""",
        })

    self.__min_links = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_links(self):
    self.__min_links = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=True)

  lag_type = __builtin__.property(_get_lag_type, _set_lag_type)
  min_links = __builtin__.property(_get_min_links, _set_min_links)


  _pyangbind_elements = {'lag_type': lag_type, 'min_links': min_links, }


class yc_state_openconfig_interfaces__interfaces_interface_aggregation_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/aggregation/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state variables for logical
aggregate / LAG interfaces
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__lag_type','__min_links','__lag_speed','__member',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__member = YANGDynClass(base=TypedListType(allowed_type=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name',caller=self._path() + ['member'], path_helper=self._path_helper, require_instance=True)), is_leaf=True, yang_name="member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='oc-if:base-interface-ref', is_config=False)
    self.__lag_speed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lag-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint32', is_config=False)
    self.__min_links = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=False)
    self.__lag_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'aggregation', u'state']

  def _get_lag_type(self):
    """
    Getter method for lag_type, mapped from YANG variable /interfaces/interface/aggregation/state/lag_type (aggregation-type)

    YANG Description: Sets the type of LAG, i.e., how it is
configured / maintained
    """
    return self.__lag_type
      
  def _set_lag_type(self, v, load=False):
    """
    Setter method for lag_type, mapped from YANG variable /interfaces/interface/aggregation/state/lag_type (aggregation-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lag_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lag_type() directly.

    YANG Description: Sets the type of LAG, i.e., how it is
configured / maintained
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lag_type must be of a type compatible with aggregation-type""",
          'defined-type': "openconfig-if-aggregate:aggregation-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=False)""",
        })

    self.__lag_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lag_type(self):
    self.__lag_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LACP': {}, u'STATIC': {}},), is_leaf=True, yang_name="lag-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='aggregation-type', is_config=False)


  def _get_min_links(self):
    """
    Getter method for min_links, mapped from YANG variable /interfaces/interface/aggregation/state/min_links (uint16)

    YANG Description: Specifies the mininum number of member
interfaces that must be active for the aggregate interface
to be available
    """
    return self.__min_links
      
  def _set_min_links(self, v, load=False):
    """
    Setter method for min_links, mapped from YANG variable /interfaces/interface/aggregation/state/min_links (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_links is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_links() directly.

    YANG Description: Specifies the mininum number of member
interfaces that must be active for the aggregate interface
to be available
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_links must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=False)""",
        })

    self.__min_links = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_links(self):
    self.__min_links = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="min-links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint16', is_config=False)


  def _get_lag_speed(self):
    """
    Getter method for lag_speed, mapped from YANG variable /interfaces/interface/aggregation/state/lag_speed (uint32)

    YANG Description: Reports effective speed of the aggregate interface,
based on speed of active member interfaces
    """
    return self.__lag_speed
      
  def _set_lag_speed(self, v, load=False):
    """
    Setter method for lag_speed, mapped from YANG variable /interfaces/interface/aggregation/state/lag_speed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lag_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lag_speed() directly.

    YANG Description: Reports effective speed of the aggregate interface,
based on speed of active member interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lag-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lag_speed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lag-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint32', is_config=False)""",
        })

    self.__lag_speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lag_speed(self):
    self.__lag_speed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lag-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='uint32', is_config=False)


  def _get_member(self):
    """
    Getter method for member, mapped from YANG variable /interfaces/interface/aggregation/state/member (oc-if:base-interface-ref)

    YANG Description: List of current member interfaces for the aggregate,
expressed as references to existing interfaces
    """
    return self.__member
      
  def _set_member(self, v, load=False):
    """
    Setter method for member, mapped from YANG variable /interfaces/interface/aggregation/state/member (oc-if:base-interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_member is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_member() directly.

    YANG Description: List of current member interfaces for the aggregate,
expressed as references to existing interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name',caller=self._path() + ['member'], path_helper=self._path_helper, require_instance=True)), is_leaf=True, yang_name="member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='oc-if:base-interface-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """member must be of a type compatible with oc-if:base-interface-ref""",
          'defined-type': "oc-if:base-interface-ref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name',caller=self._path() + ['member'], path_helper=self._path_helper, require_instance=True)), is_leaf=True, yang_name="member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='oc-if:base-interface-ref', is_config=False)""",
        })

    self.__member = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_member(self):
    self.__member = YANGDynClass(base=TypedListType(allowed_type=ReferenceType(referenced_path='/oc-if:interfaces/oc-if:interface/oc-if:name',caller=self._path() + ['member'], path_helper=self._path_helper, require_instance=True)), is_leaf=True, yang_name="member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='oc-if:base-interface-ref', is_config=False)

  lag_type = __builtin__.property(_get_lag_type)
  min_links = __builtin__.property(_get_min_links)
  lag_speed = __builtin__.property(_get_lag_speed)
  member = __builtin__.property(_get_member)


  _pyangbind_elements = {'lag_type': lag_type, 'min_links': min_links, 'lag_speed': lag_speed, 'member': member, }


class yc_config_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/aggregation/switched-vlan/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters for VLANs
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__interface_mode','__native_vlan','__access_vlan','__trunk_vlans',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__native_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    self.__access_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    self.__trunk_vlans = YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)
    self.__interface_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'aggregation', u'switched-vlan', u'config']

  def _get_interface_mode(self):
    """
    Getter method for interface_mode, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/interface_mode (oc-vlan-types:vlan-mode-type)

    YANG Description: Set the interface to access or trunk mode for
VLANs
    """
    return self.__interface_mode
      
  def _set_interface_mode(self, v, load=False):
    """
    Setter method for interface_mode, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/interface_mode (oc-vlan-types:vlan-mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_mode() directly.

    YANG Description: Set the interface to access or trunk mode for
VLANs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_mode must be of a type compatible with oc-vlan-types:vlan-mode-type""",
          'defined-type': "oc-vlan-types:vlan-mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)""",
        })

    self.__interface_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_mode(self):
    self.__interface_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACCESS': {}, u'TRUNK': {}},), is_leaf=True, yang_name="interface-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-mode-type', is_config=True)


  def _get_native_vlan(self):
    """
    Getter method for native_vlan, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/native_vlan (oc-vlan-types:vlan-id)

    YANG Description: Set the native VLAN id for untagged frames arriving on
a trunk interface.  Tagged frames sent on an interface
configured with a native VLAN should have their tags
stripped prior to transmission. This configuration is only
valid on a trunk interface.
    """
    return self.__native_vlan
      
  def _set_native_vlan(self, v, load=False):
    """
    Setter method for native_vlan, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/native_vlan (oc-vlan-types:vlan-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_native_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_native_vlan() directly.

    YANG Description: Set the native VLAN id for untagged frames arriving on
a trunk interface.  Tagged frames sent on an interface
configured with a native VLAN should have their tags
stripped prior to transmission. This configuration is only
valid on a trunk interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """native_vlan must be of a type compatible with oc-vlan-types:vlan-id""",
          'defined-type': "oc-vlan-types:vlan-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)""",
        })

    self.__native_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_native_vlan(self):
    self.__native_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="native-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)


  def _get_access_vlan(self):
    """
    Getter method for access_vlan, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/access_vlan (oc-vlan-types:vlan-id)

    YANG Description: Assign the access vlan to the access port.
    """
    return self.__access_vlan
      
  def _set_access_vlan(self, v, load=False):
    """
    Setter method for access_vlan, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/access_vlan (oc-vlan-types:vlan-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access_vlan() directly.

    YANG Description: Assign the access vlan to the access port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access_vlan must be of a type compatible with oc-vlan-types:vlan-id""",
          'defined-type': "oc-vlan-types:vlan-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)""",
        })

    self.__access_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access_vlan(self):
    self.__access_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="access-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='oc-vlan-types:vlan-id', is_config=True)


  def _get_trunk_vlans(self):
    """
    Getter method for trunk_vlans, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/trunk_vlans (union)

    YANG Description: Specify VLANs, or ranges thereof, that the interface may
carry when in trunk mode.  If not specified, all VLANs are
allowed on the interface. Ranges are specified in the form
x..y, where x<y - ranges are assumed to be inclusive (such
that the VLAN range is x <= range <= y.
    """
    return self.__trunk_vlans
      
  def _set_trunk_vlans(self, v, load=False):
    """
    Setter method for trunk_vlans, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config/trunk_vlans (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trunk_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trunk_vlans() directly.

    YANG Description: Specify VLANs, or ranges thereof, that the interface may
carry when in trunk mode.  If not specified, all VLANs are
allowed on the interface. Ranges are specified in the form
x..y, where x<y - ranges are assumed to be inclusive (such
that the VLAN range is x <= range <= y.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trunk_vlans must be of a type compatible with union""",
          'defined-type': "openconfig-vlan:union",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)""",
        })

    self.__trunk_vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trunk_vlans(self):
    self.__trunk_vlans = YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\\.\\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])$'}),]), is_leaf=False, yang_name="trunk-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)

  interface_mode = __builtin__.property(_get_interface_mode, _set_interface_mode)
  native_vlan = __builtin__.property(_get_native_vlan, _set_native_vlan)
  access_vlan = __builtin__.property(_get_access_vlan, _set_access_vlan)
  trunk_vlans = __builtin__.property(_get_trunk_vlans, _set_trunk_vlans)


  _pyangbind_elements = {'interface_mode': interface_mode, 'native_vlan': native_vlan, 'access_vlan': access_vlan, 'trunk_vlans': trunk_vlans, }


class yc_switched_vlan_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/aggregation/switched-vlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for VLAN interface-specific
data on Ethernet interfaces.  These are for standard
L2, switched-style VLANs.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__config',)

  _yang_name = 'switched-vlan'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'aggregation', u'switched-vlan']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config (container)

    YANG Description: Configuration parameters for VLANs
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters for VLANs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = {'config': config, }


class yc_aggregation_openconfig_interfaces__interfaces_interface_aggregation(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/aggregation. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Options for logical interfaces representing
aggregates
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__config','__state','__switched_vlan',)

  _yang_name = 'aggregation'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__switched_vlan = YANGDynClass(base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_aggregation_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'aggregation']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/aggregation/config (container)

    YANG Description: Configuration variables for logical aggregate /
LAG interfaces
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/aggregation/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration variables for logical aggregate /
LAG interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_aggregation_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /interfaces/interface/aggregation/state (container)

    YANG Description: Operational state variables for logical
aggregate / LAG interfaces
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /interfaces/interface/aggregation/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state variables for logical
aggregate / LAG interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_interfaces__interfaces_interface_aggregation_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_aggregation_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_aggregation_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)


  def _get_switched_vlan(self):
    """
    Getter method for switched_vlan, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan (container)

    YANG Description: Enclosing container for VLAN interface-specific
data on Ethernet interfaces.  These are for standard
L2, switched-style VLANs.
    """
    return self.__switched_vlan
      
  def _set_switched_vlan(self, v, load=False):
    """
    Setter method for switched_vlan, mapped from YANG variable /interfaces/interface/aggregation/switched_vlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_switched_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_switched_vlan() directly.

    YANG Description: Enclosing container for VLAN interface-specific
data on Ethernet interfaces.  These are for standard
L2, switched-style VLANs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """switched_vlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)""",
        })

    self.__switched_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_switched_vlan(self):
    self.__switched_vlan = YANGDynClass(base=yc_switched_vlan_openconfig_interfaces__interfaces_interface_aggregation_switched_vlan, is_container='container', yang_name="switched-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  switched_vlan = __builtin__.property(_get_switched_vlan, _set_switched_vlan)


  _pyangbind_elements = {'config': config, 'state': state, 'switched_vlan': switched_vlan, }


class yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for routed vlan interfaces
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__vlan',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__vlan = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'config']

  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /interfaces/interface/routed_vlan/config/vlan (union)

    YANG Description: References the VLAN for which this IP interface
provides routing services -- similar to a switch virtual
interface (SVI), or integrated routing and bridging interface
(IRB) in some implementations.
    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /interfaces/interface/routed_vlan/config/vlan (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.

    YANG Description: References the VLAN for which this IP interface
provides routing services -- similar to a switch virtual
interface (SVI), or integrated routing and bridging interface
(IRB) in some implementations.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with union""",
          'defined-type': "openconfig-vlan:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=True)

  vlan = __builtin__.property(_get_vlan, _set_vlan)


  _pyangbind_elements = {'vlan': vlan, }


class yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data 
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__vlan',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__vlan = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'state']

  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /interfaces/interface/routed_vlan/state/vlan (union)

    YANG Description: References the VLAN for which this IP interface
provides routing services -- similar to a switch virtual
interface (SVI), or integrated routing and bridging interface
(IRB) in some implementations.
    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /interfaces/interface/routed_vlan/state/vlan (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.

    YANG Description: References the VLAN for which this IP interface
provides routing services -- similar to a switch virtual
interface (SVI), or integrated routing and bridging interface
(IRB) in some implementations.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with union""",
          'defined-type': "openconfig-vlan:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=False)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),unicode,], is_leaf=True, yang_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='union', is_config=False)

  vlan = __builtin__.property(_get_vlan)


  _pyangbind_elements = {'vlan': vlan, }


class yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/addresses/address/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for each configured IPv4
address on the interface
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__ip','__prefix_length',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)
    self.__prefix_length = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'addresses', u'address', u'config']

  def _get_ip(self):
    """
    Getter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/config/ip (oc-inet:ipv4-address)

    YANG Description: The IPv4 address on the interface.
    """
    return self.__ip
      
  def _set_ip(self, v, load=False):
    """
    Setter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/config/ip (oc-inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip() directly.

    YANG Description: The IPv4 address on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip must be of a type compatible with oc-inet:ipv4-address""",
          'defined-type': "oc-inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)""",
        })

    self.__ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip(self):
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)


  def _get_prefix_length(self):
    """
    Getter method for prefix_length, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/config/prefix_length (uint8)

    YANG Description: The length of the subnet prefix.
    """
    return self.__prefix_length
      
  def _set_prefix_length(self, v, load=False):
    """
    Setter method for prefix_length, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/config/prefix_length (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_length() directly.

    YANG Description: The length of the subnet prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_length must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=True)""",
        })

    self.__prefix_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_length(self):
    self.__prefix_length = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=True)

  ip = __builtin__.property(_get_ip, _set_ip)
  prefix_length = __builtin__.property(_get_prefix_length, _set_prefix_length)


  _pyangbind_elements = {'ip': ip, 'prefix_length': prefix_length, }


class yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/addresses/address/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for each IPv4 address
configured on the interface
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__ip','__prefix_length','__origin',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__origin = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LINK_LAYER': {}, u'DHCP': {}, u'RANDOM': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='ip-address-origin', is_config=False)
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)
    self.__prefix_length = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'addresses', u'address', u'state']

  def _get_ip(self):
    """
    Getter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state/ip (oc-inet:ipv4-address)

    YANG Description: The IPv4 address on the interface.
    """
    return self.__ip
      
  def _set_ip(self, v, load=False):
    """
    Setter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state/ip (oc-inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip() directly.

    YANG Description: The IPv4 address on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip must be of a type compatible with oc-inet:ipv4-address""",
          'defined-type': "oc-inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)""",
        })

    self.__ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip(self):
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)


  def _get_prefix_length(self):
    """
    Getter method for prefix_length, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state/prefix_length (uint8)

    YANG Description: The length of the subnet prefix.
    """
    return self.__prefix_length
      
  def _set_prefix_length(self, v, load=False):
    """
    Setter method for prefix_length, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state/prefix_length (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_length() directly.

    YANG Description: The length of the subnet prefix.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_length must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=False)""",
        })

    self.__prefix_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_length(self):
    self.__prefix_length = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..32']}), is_leaf=True, yang_name="prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='uint8', is_config=False)


  def _get_origin(self):
    """
    Getter method for origin, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state/origin (ip-address-origin)

    YANG Description: The origin of this address, e.g., statically configured,
assigned by DHCP, etc..
    """
    return self.__origin
      
  def _set_origin(self, v, load=False):
    """
    Setter method for origin, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state/origin (ip-address-origin)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_origin() directly.

    YANG Description: The origin of this address, e.g., statically configured,
assigned by DHCP, etc..
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LINK_LAYER': {}, u'DHCP': {}, u'RANDOM': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='ip-address-origin', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """origin must be of a type compatible with ip-address-origin""",
          'defined-type': "openconfig-if-ip:ip-address-origin",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LINK_LAYER': {}, u'DHCP': {}, u'RANDOM': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='ip-address-origin', is_config=False)""",
        })

    self.__origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_origin(self):
    self.__origin = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'LINK_LAYER': {}, u'DHCP': {}, u'RANDOM': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='ip-address-origin', is_config=False)

  ip = __builtin__.property(_get_ip)
  prefix_length = __builtin__.property(_get_prefix_length)
  origin = __builtin__.property(_get_origin)


  _pyangbind_elements = {'ip': ip, 'prefix_length': prefix_length, 'origin': origin, }


class yc_address_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/addresses/address. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of configured IPv4 addresses on the interface.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__ip','__config','__state',)

  _yang_name = 'address'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__ip = YANGDynClass(base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'addresses', u'address']

  def _get_ip(self):
    """
    Getter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/ip (leafref)

    YANG Description: References the configured IP address
    """
    return self.__ip
      
  def _set_ip(self, v, load=False):
    """
    Setter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/ip (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip() directly.

    YANG Description: References the configured IP address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)""",
        })

    self.__ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip(self):
    self.__ip = YANGDynClass(base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/config (container)

    YANG Description: Configuration data for each configured IPv4
address on the interface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for each configured IPv4
address on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state (container)

    YANG Description: Operational state data for each IPv4 address
configured on the interface
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for each IPv4 address
configured on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

  ip = __builtin__.property(_get_ip, _set_ip)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = {'ip': ip, 'config': config, 'state': state, }


class yc_addresses_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/addresses. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for address list
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__address',)

  _yang_name = 'addresses'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__address = YANGDynClass(base=YANGListType("ip",yc_address_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address, yang_name="address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'addresses']

  def _get_address(self):
    """
    Getter method for address, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address (list)

    YANG Description: The list of configured IPv4 addresses on the interface.
    """
    return self.__address
      
  def _set_address(self, v, load=False):
    """
    Setter method for address, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses/address (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_address() directly.

    YANG Description: The list of configured IPv4 addresses on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ip",yc_address_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address, yang_name="address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """address must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip",yc_address_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address, yang_name="address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)""",
        })

    self.__address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_address(self):
    self.__address = YANGDynClass(base=YANGListType("ip",yc_address_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses_address, yang_name="address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)

  address = __builtin__.property(_get_address, _set_address)


  _pyangbind_elements = {'address': address, }


class yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for each configured IPv4
address on the interface
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__ip','__link_layer_address',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)
    self.__link_layer_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'neighbors', u'neighbor', u'config']

  def _get_ip(self):
    """
    Getter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/config/ip (oc-inet:ipv4-address)

    YANG Description: The IPv4 address of the neighbor node.
    """
    return self.__ip
      
  def _set_ip(self, v, load=False):
    """
    Setter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/config/ip (oc-inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip() directly.

    YANG Description: The IPv4 address of the neighbor node.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip must be of a type compatible with oc-inet:ipv4-address""",
          'defined-type': "oc-inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)""",
        })

    self.__ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip(self):
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=True)


  def _get_link_layer_address(self):
    """
    Getter method for link_layer_address, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/config/link_layer_address (oc-yang:phys-address)

    YANG Description: The link-layer address of the neighbor node.
    """
    return self.__link_layer_address
      
  def _set_link_layer_address(self, v, load=False):
    """
    Setter method for link_layer_address, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/config/link_layer_address (oc-yang:phys-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_layer_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_layer_address() directly.

    YANG Description: The link-layer address of the neighbor node.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_layer_address must be of a type compatible with oc-yang:phys-address""",
          'defined-type': "oc-yang:phys-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=True)""",
        })

    self.__link_layer_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_layer_address(self):
    self.__link_layer_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=True)

  ip = __builtin__.property(_get_ip, _set_ip)
  link_layer_address = __builtin__.property(_get_link_layer_address, _set_link_layer_address)


  _pyangbind_elements = {'ip': ip, 'link_layer_address': link_layer_address, }


class yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for each IPv4 address
configured on the interface
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__ip','__link_layer_address','__origin',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__origin = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DYNAMIC': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='neighbor-origin', is_config=False)
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)
    self.__link_layer_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'neighbors', u'neighbor', u'state']

  def _get_ip(self):
    """
    Getter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state/ip (oc-inet:ipv4-address)

    YANG Description: The IPv4 address of the neighbor node.
    """
    return self.__ip
      
  def _set_ip(self, v, load=False):
    """
    Setter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state/ip (oc-inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip() directly.

    YANG Description: The IPv4 address of the neighbor node.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip must be of a type compatible with oc-inet:ipv4-address""",
          'defined-type': "oc-inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)""",
        })

    self.__ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip(self):
    self.__ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'}), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-inet:ipv4-address', is_config=False)


  def _get_link_layer_address(self):
    """
    Getter method for link_layer_address, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state/link_layer_address (oc-yang:phys-address)

    YANG Description: The link-layer address of the neighbor node.
    """
    return self.__link_layer_address
      
  def _set_link_layer_address(self, v, load=False):
    """
    Setter method for link_layer_address, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state/link_layer_address (oc-yang:phys-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_layer_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_layer_address() directly.

    YANG Description: The link-layer address of the neighbor node.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_layer_address must be of a type compatible with oc-yang:phys-address""",
          'defined-type': "oc-yang:phys-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=False)""",
        })

    self.__link_layer_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_layer_address(self):
    self.__link_layer_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?$'}), is_leaf=True, yang_name="link-layer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='oc-yang:phys-address', is_config=False)


  def _get_origin(self):
    """
    Getter method for origin, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state/origin (neighbor-origin)

    YANG Description: The origin of this neighbor entry, static or dynamic.
    """
    return self.__origin
      
  def _set_origin(self, v, load=False):
    """
    Setter method for origin, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state/origin (neighbor-origin)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_origin() directly.

    YANG Description: The origin of this neighbor entry, static or dynamic.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DYNAMIC': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='neighbor-origin', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """origin must be of a type compatible with neighbor-origin""",
          'defined-type': "openconfig-if-ip:neighbor-origin",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DYNAMIC': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='neighbor-origin', is_config=False)""",
        })

    self.__origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_origin(self):
    self.__origin = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DYNAMIC': {}, u'OTHER': {}, u'STATIC': {}},), is_leaf=True, yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='neighbor-origin', is_config=False)

  ip = __builtin__.property(_get_ip)
  link_layer_address = __builtin__.property(_get_link_layer_address)
  origin = __builtin__.property(_get_origin)


  _pyangbind_elements = {'ip': ip, 'link_layer_address': link_layer_address, 'origin': origin, }


class yc_neighbor_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of mappings from IPv4 addresses to
link-layer addresses.

Entries in this list are used as static entries in the
ARP Cache.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__ip','__config','__state',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__ip = YANGDynClass(base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'neighbors', u'neighbor']

  def _get_ip(self):
    """
    Getter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/ip (leafref)

    YANG Description: References the configured IP address
    """
    return self.__ip
      
  def _set_ip(self, v, load=False):
    """
    Setter method for ip, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/ip (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip() directly.

    YANG Description: References the configured IP address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)""",
        })

    self.__ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip(self):
    self.__ip = YANGDynClass(base=ReferenceType(referenced_path='../config/ip', caller=self._path() + ['ip'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/config (container)

    YANG Description: Configuration data for each configured IPv4
address on the interface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for each configured IPv4
address on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state (container)

    YANG Description: Operational state data for each IPv4 address
configured on the interface
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for each IPv4 address
configured on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

  ip = __builtin__.property(_get_ip, _set_ip)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = {'ip': ip, 'config': config, 'state': state, }


class yc_neighbors_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4/neighbors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for neighbor list
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__neighbor',)

  _yang_name = 'neighbors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__neighbor = YANGDynClass(base=YANGListType("ip",yc_neighbor_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4', u'neighbors']

  def _get_neighbor(self):
    """
    Getter method for neighbor, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor (list)

    YANG Description: A list of mappings from IPv4 addresses to
link-layer addresses.

Entries in this list are used as static entries in the
ARP Cache.
    """
    return self.__neighbor
      
  def _set_neighbor(self, v, load=False):
    """
    Setter method for neighbor, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors/neighbor (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor() directly.

    YANG Description: A list of mappings from IPv4 addresses to
link-layer addresses.

Entries in this list are used as static entries in the
ARP Cache.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ip",yc_neighbor_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip",yc_neighbor_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)""",
        })

    self.__neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor(self):
    self.__neighbor = YANGDynClass(base=YANGListType("ip",yc_neighbor_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='list', is_config=True)

  neighbor = __builtin__.property(_get_neighbor, _set_neighbor)


  _pyangbind_elements = {'neighbor': neighbor, }


class yc_ipv4_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan/ipv4. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Parameters for the IPv4 address family.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__addresses','__neighbors',)

  _yang_name = 'ipv4'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__neighbors = YANGDynClass(base=yc_neighbors_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    self.__addresses = YANGDynClass(base=yc_addresses_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses, is_container='container', yang_name="addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan', u'ipv4']

  def _get_addresses(self):
    """
    Getter method for addresses, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses (container)

    YANG Description: Enclosing container for address list
    """
    return self.__addresses
      
  def _set_addresses(self, v, load=False):
    """
    Setter method for addresses, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/addresses (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_addresses() directly.

    YANG Description: Enclosing container for address list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_addresses_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses, is_container='container', yang_name="addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """addresses must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_addresses_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses, is_container='container', yang_name="addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)""",
        })

    self.__addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_addresses(self):
    self.__addresses = YANGDynClass(base=yc_addresses_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_addresses, is_container='container', yang_name="addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)


  def _get_neighbors(self):
    """
    Getter method for neighbors, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors (container)

    YANG Description: Enclosing container for neighbor list
    """
    return self.__neighbors
      
  def _set_neighbors(self, v, load=False):
    """
    Setter method for neighbors, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4/neighbors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbors() directly.

    YANG Description: Enclosing container for neighbor list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_neighbors_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_neighbors_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)""",
        })

    self.__neighbors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbors(self):
    self.__neighbors = YANGDynClass(base=yc_neighbors_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

  addresses = __builtin__.property(_get_addresses, _set_addresses)
  neighbors = __builtin__.property(_get_neighbors, _set_neighbors)


  _pyangbind_elements = {'addresses': addresses, 'neighbors': neighbors, }


class yc_routed_vlan_openconfig_interfaces__interfaces_interface_routed_vlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface/routed-vlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for routed vlan interfaces.  These
logical interfaces are also known as SVI (switched virtual
interface), IRB (integrated routing and bridging), RVI
(routed VLAN interface)
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__config','__state','__ipv4',)

  _yang_name = 'routed-vlan'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    self.__ipv4 = YANGDynClass(base=yc_ipv4_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'routed-vlan']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/routed_vlan/config (container)

    YANG Description: Configuration data for routed vlan interfaces
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/routed_vlan/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for routed vlan interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_routed_vlan_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /interfaces/interface/routed_vlan/state (container)

    YANG Description: Operational state data 
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /interfaces/interface/routed_vlan/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_routed_vlan_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)


  def _get_ipv4(self):
    """
    Getter method for ipv4, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4 (container)

    YANG Description: Parameters for the IPv4 address family.
    """
    return self.__ipv4
      
  def _set_ipv4(self, v, load=False):
    """
    Setter method for ipv4, mapped from YANG variable /interfaces/interface/routed_vlan/ipv4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4() directly.

    YANG Description: Parameters for the IPv4 address family.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_ipv4_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_ipv4_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)""",
        })

    self.__ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4(self):
    self.__ipv4 = YANGDynClass(base=yc_ipv4_openconfig_interfaces__interfaces_interface_routed_vlan_ipv4, is_container='container', yang_name="ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ip', defining_module='openconfig-if-ip', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  ipv4 = __builtin__.property(_get_ipv4, _set_ipv4)


  _pyangbind_elements = {'config': config, 'state': state, 'ipv4': ipv4, }


class yc_interface_openconfig_interfaces__interfaces_interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of named interfaces on the device.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__name','__config','__state','__ethernet','__aggregation','__routed_vlan',)

  _yang_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=ReferenceType(referenced_path='../config/name', caller=self._path() + ['name'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='leafref', is_config=True)
    self.__aggregation = YANGDynClass(base=yc_aggregation_openconfig_interfaces__interfaces_interface_aggregation, is_container='container', yang_name="aggregation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)
    self.__routed_vlan = YANGDynClass(base=yc_routed_vlan_openconfig_interfaces__interfaces_interface_routed_vlan, is_container='container', yang_name="routed-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)
    self.__ethernet = YANGDynClass(base=yc_ethernet_openconfig_interfaces__interfaces_interface_ethernet, is_container='container', yang_name="ethernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces/interface/name (leafref)

    YANG Description: References the configured name of the interface
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces/interface/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: References the configured name of the interface
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ReferenceType(referenced_path='../config/name', caller=self._path() + ['name'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=ReferenceType(referenced_path='../config/name', caller=self._path() + ['name'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=ReferenceType(referenced_path='../config/name', caller=self._path() + ['name'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /interfaces/interface/config (container)

    YANG Description: Configurable items at the global, physical interface
level
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /interfaces/interface/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configurable items at the global, physical interface
level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_interfaces__interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_interfaces__interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /interfaces/interface/state (container)

    YANG Description: Operational state data at the global interface level
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /interfaces/interface/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data at the global interface level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_interfaces__interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_interfaces__interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)


  def _get_ethernet(self):
    """
    Getter method for ethernet, mapped from YANG variable /interfaces/interface/ethernet (container)

    YANG Description: Top-level container for ethernet configuration
and state
    """
    return self.__ethernet
      
  def _set_ethernet(self, v, load=False):
    """
    Setter method for ethernet, mapped from YANG variable /interfaces/interface/ethernet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ethernet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ethernet() directly.

    YANG Description: Top-level container for ethernet configuration
and state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_ethernet_openconfig_interfaces__interfaces_interface_ethernet, is_container='container', yang_name="ethernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ethernet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_ethernet_openconfig_interfaces__interfaces_interface_ethernet, is_container='container', yang_name="ethernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)""",
        })

    self.__ethernet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ethernet(self):
    self.__ethernet = YANGDynClass(base=yc_ethernet_openconfig_interfaces__interfaces_interface_ethernet, is_container='container', yang_name="ethernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/ethernet', defining_module='openconfig-if-ethernet', yang_type='container', is_config=True)


  def _get_aggregation(self):
    """
    Getter method for aggregation, mapped from YANG variable /interfaces/interface/aggregation (container)

    YANG Description: Options for logical interfaces representing
aggregates
    """
    return self.__aggregation
      
  def _set_aggregation(self, v, load=False):
    """
    Setter method for aggregation, mapped from YANG variable /interfaces/interface/aggregation (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aggregation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aggregation() directly.

    YANG Description: Options for logical interfaces representing
aggregates
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_aggregation_openconfig_interfaces__interfaces_interface_aggregation, is_container='container', yang_name="aggregation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aggregation must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_aggregation_openconfig_interfaces__interfaces_interface_aggregation, is_container='container', yang_name="aggregation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)""",
        })

    self.__aggregation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aggregation(self):
    self.__aggregation = YANGDynClass(base=yc_aggregation_openconfig_interfaces__interfaces_interface_aggregation, is_container='container', yang_name="aggregation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces/aggregate', defining_module='openconfig-if-aggregate', yang_type='container', is_config=True)


  def _get_routed_vlan(self):
    """
    Getter method for routed_vlan, mapped from YANG variable /interfaces/interface/routed_vlan (container)

    YANG Description: Top-level container for routed vlan interfaces.  These
logical interfaces are also known as SVI (switched virtual
interface), IRB (integrated routing and bridging), RVI
(routed VLAN interface)
    """
    return self.__routed_vlan
      
  def _set_routed_vlan(self, v, load=False):
    """
    Setter method for routed_vlan, mapped from YANG variable /interfaces/interface/routed_vlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_routed_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_routed_vlan() directly.

    YANG Description: Top-level container for routed vlan interfaces.  These
logical interfaces are also known as SVI (switched virtual
interface), IRB (integrated routing and bridging), RVI
(routed VLAN interface)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_routed_vlan_openconfig_interfaces__interfaces_interface_routed_vlan, is_container='container', yang_name="routed-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """routed_vlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_routed_vlan_openconfig_interfaces__interfaces_interface_routed_vlan, is_container='container', yang_name="routed-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)""",
        })

    self.__routed_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_routed_vlan(self):
    self.__routed_vlan = YANGDynClass(base=yc_routed_vlan_openconfig_interfaces__interfaces_interface_routed_vlan, is_container='container', yang_name="routed-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/vlan', defining_module='openconfig-vlan', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  ethernet = __builtin__.property(_get_ethernet, _set_ethernet)
  aggregation = __builtin__.property(_get_aggregation, _set_aggregation)
  routed_vlan = __builtin__.property(_get_routed_vlan, _set_routed_vlan)


  _pyangbind_elements = {'name': name, 'config': config, 'state': state, 'ethernet': ethernet, 'aggregation': aggregation, 'routed_vlan': routed_vlan, }


class yc_interfaces_openconfig_interfaces__interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for interfaces, including configuration
and state data.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__interface',)

  _yang_name = 'interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=YANGListType("name",yc_interface_openconfig_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /interfaces/interface (list)

    YANG Description: The list of named interfaces on the device.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /interfaces/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: The list of named interfaces on the device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_interface_openconfig_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_interface_openconfig_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("name",yc_interface_openconfig_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='list', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)


  _pyangbind_elements = {'interface': interface, }


class openconfig_interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-interfaces - based on the path /openconfig-interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Model for managing network interfaces and subinterfaces.  This
module also defines convenience types / groupings for other
models to create references to interfaces:

 base-interface-ref (type) -  reference to a base interface
 interface-ref (grouping) -  container for reference to a
   interface + subinterface
 interface-ref-state (grouping) - container for read-only
   (opstate) reference to interface + subinterface

This model reuses data items defined in the IETF YANG model for
interfaces described by RFC 7223 with an alternate structure
(particularly for operational state data) and with
additional configuration items.

Portions of this code were derived from IETF RFC 7223.
Please reproduce this note if possible.

IETF code is subject to the following copyright and license:
Copyright (c) IETF Trust and the persons identified as authors of
the code.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, is permitted pursuant to, and subject to the license
terms contained in, the Simplified BSD License set forth in
Section 4.c of the IETF Trust's Legal Provisions Relating
to IETF Documents (http://trustee.ietf.org/license-info).
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__interfaces',)

  _yang_name = 'openconfig-interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /interfaces (container)

    YANG Description: Top level container for interfaces, including configuration
and state data.
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Top level container for interfaces, including configuration
and state data.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interfaces_openconfig_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interfaces_openconfig_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/interfaces', defining_module='openconfig-interfaces', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)


  _pyangbind_elements = {'interfaces': interfaces, }


class openconfig_if_aggregate(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-if-aggregate - based on the path /openconfig-if-aggregate. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Model for managing aggregated (aka bundle, LAG) interfaces.
  """
  _pyangbind_elements = {}

  

class openconfig_if_ip(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-if-ip - based on the path /openconfig-if-ip. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This model defines data for managing configuration and
operational state on IP (IPv4 and IPv6) interfaces.

This model reuses data items defined in the IETF YANG model for
interfaces described by RFC 7277 with an alternate structure
(particularly for operational state data) and with
additional configuration items.

Portions of this code were derived from IETF RFC 7277.
Please reproduce this note if possible.

IETF code is subject to the following copyright and license:
Copyright (c) IETF Trust and the persons identified as authors of
the code.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, is permitted pursuant to, and subject to the license
terms contained in, the Simplified BSD License set forth in
Section 4.c of the IETF Trust's Legal Provisions Relating
to IETF Documents (http://trustee.ietf.org/license-info).
  """
  _pyangbind_elements = {}

  

class openconfig_vlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-vlan - based on the path /openconfig-vlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This module defines configuration and state variables for VLANs,
in addition to VLAN parameters associated with interfaces
  """
  _pyangbind_elements = {}

  

